import { createApp } from 'vue'
import { createPinia } from 'pinia'
import './style.css'
import App from './App.vue'
import router from './router'
import UpdateNotification from './components/UpdateNotification.vue'
import { updateService } from './services/updateService.js'

// Cr√©er l'instance Pinia
const pinia = createPinia()

// Cr√©er l'application Vue
const app = createApp(App)

// Enregistrer le composant global
app.component('UpdateNotification', UpdateNotification)

// Enregistrement du Service Worker pour PWA avec gestion des mises √† jour
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js', {
      updateViaCache: 'none' // Forcer la v√©rification des mises √† jour
    })
      .then((registration) => {
        console.log('‚úÖ Service Worker enregistr√© avec succ√®s:', registration.scope);
        
        // V√©rifier les mises √† jour toutes les 30 secondes
        setInterval(() => {
          registration.update();
        }, 30000);
        
        // √âcouter les mises √† jour disponibles
        registration.addEventListener('updatefound', () => {
          console.log('üîÑ Service Worker: Mise √† jour disponible');
          
          const newWorker = registration.installing;
          newWorker.addEventListener('statechange', () => {
            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
              console.log('üÜï Service Worker: Nouvelle version install√©e');
              
              // Utiliser la popup personnalis√©e au lieu de confirm()
              updateService.showUpdateNotification('0.0.15', '0.0.16');
            }
          });
        });
      })
      .catch((error) => {
        console.log('‚ùå √âchec de l\'enregistrement du Service Worker:', error);
      });
  });
}

// Fournir le service de mise √† jour globalement
app.provide('updateService', updateService)

app.use(pinia).use(router).mount('#app')
