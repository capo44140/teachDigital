/**
 * Service de gestion des donn√©es offline-first
 * G√®re le cache et la synchronisation des donn√©es critiques
 */

import cacheService from './cacheService.js'
import { ProfileService } from './profile/profileService.js'
import { LessonService } from './lessonService.js'
import { NotificationService } from './notificationService.js'

class OfflineDataService {
  constructor() {
    this.cachePrefix = 'offline_'
    this.syncQueue = []
    this.isOnline = navigator.onLine
    this.syncInProgress = false
    
    // √âcouter les changements de connectivit√©
    window.addEventListener('online', this.handleOnline.bind(this))
    window.addEventListener('offline', this.handleOffline.bind(this))
    
    // D√©marrer la synchronisation p√©riodique
    this.startPeriodicSync()
  }

  /**
   * Gestion de la connexion en ligne
   */
  handleOnline() {
    console.log('üåê Connexion r√©tablie - Synchronisation des donn√©es')
    this.isOnline = true
    this.syncPendingChanges()
  }

  /**
   * Gestion de la d√©connexion
   */
  handleOffline() {
    console.log('üì¥ Mode hors ligne activ√©')
    this.isOnline = false
  }

  /**
   * Cache les donn√©es critiques pour le mode offline
   * @param {string} dataType - Type de donn√©es (profiles, lessons, notifications)
   * @param {Array|Object} data - Donn√©es √† mettre en cache
   * @param {Object} options - Options de cache
   */
  async cacheCriticalData(dataType, data, options = {}) {
    const {
      ttl = 24 * 60 * 60 * 1000, // 24 heures par d√©faut
      priority = 'high',
      tags = ['critical', 'offline']
    } = options

    const cacheKey = `${this.cachePrefix}${dataType}`
    
    try {
      await cacheService.set(cacheKey, data, {
        ttl,
        persistent: true,
        priority,
        tags
      })

      // Mettre √† jour le timestamp de derni√®re synchronisation
      await cacheService.set(`${cacheKey}_last_sync`, Date.now(), {
        ttl: ttl * 2,
        persistent: true,
        priority: 'normal'
      })

      console.log(`üì¶ Donn√©es critiques mises en cache: ${dataType}`)
    } catch (error) {
      console.error(`Erreur lors de la mise en cache de ${dataType}:`, error)
    }
  }

  /**
   * R√©cup√®re les donn√©es critiques depuis le cache avec strat√©gie stale-while-revalidate
   * @param {string} dataType - Type de donn√©es
   * @param {Function} fetchFn - Fonction de r√©cup√©ration en ligne
   * @param {Object} options - Options
   */
  async getCriticalData(dataType, fetchFn, options = {}) {
    const cacheKey = `${this.cachePrefix}${dataType}`
    const lastSyncKey = `${cacheKey}_last_sync`
    const { staleWhileRevalidate = true } = options
    
    // Essayer de r√©cup√©rer depuis le cache
    const cachedData = cacheService.get(cacheKey)
    const lastSync = cacheService.get(lastSyncKey, 0)
    const isFresh = cachedData && this.isDataFresh(lastSync, options.maxAge)
    
    // Strat√©gie stale-while-revalidate :
    // Retourner imm√©diatement les donn√©es en cache et revalider en arri√®re-plan
    if (cachedData && staleWhileRevalidate && this.isOnline && fetchFn) {
      console.log(`üì± Stale-while-revalidate: retour imm√©diat du cache pour ${dataType}`)
      
      // Si les donn√©es sont fra√Æches, les retourner imm√©diatement
      if (isFresh) {
        return cachedData
      }
      
      // Si les donn√©es sont p√©rim√©es, les retourner quand m√™me mais revalider en arri√®re-plan
      console.log(`üîÑ Revalidation en arri√®re-plan pour ${dataType}`)
      this.revalidateInBackground(dataType, fetchFn, options)
      
      return cachedData
    }
    
    // Si pas de cache ou strat√©gie d√©sactiv√©e, comportement classique
    if (isFresh && cachedData) {
      console.log(`üì± Donn√©es fra√Æches r√©cup√©r√©es depuis le cache: ${dataType}`)
      return cachedData
    }

    // Si en ligne, essayer de r√©cup√©rer les donn√©es fra√Æches
    if (this.isOnline && fetchFn) {
      try {
        console.log(`üåê R√©cup√©ration des donn√©es en ligne: ${dataType}`)
        const freshData = await fetchFn()
        
        // Mettre en cache les nouvelles donn√©es
        await this.cacheCriticalData(dataType, freshData, options)
        
        return freshData
      } catch (error) {
        console.warn(`Erreur lors de la r√©cup√©ration en ligne de ${dataType}:`, error)
        
        // Retourner les donn√©es en cache si disponibles
        if (cachedData) {
          console.log(`üì± Fallback sur les donn√©es en cache: ${dataType}`)
          return cachedData
        }
        
        throw error
      }
    }

    // Mode offline ou erreur - retourner les donn√©es en cache
    if (cachedData) {
      console.log(`üì± Mode offline - donn√©es depuis le cache: ${dataType}`)
      return cachedData
    }

    throw new Error(`Aucune donn√©e disponible pour ${dataType} en mode offline`)
  }

  /**
   * Revalide les donn√©es en arri√®re-plan sans bloquer
   * @param {string} dataType - Type de donn√©es
   * @param {Function} fetchFn - Fonction de r√©cup√©ration
   * @param {Object} options - Options
   */
  revalidateInBackground(dataType, fetchFn, options = {}) {
    // Utiliser setTimeout pour ne pas bloquer le thread principal
    setTimeout(async () => {
      try {
        console.log(`üîÑ D√©but de revalidation pour ${dataType}`)
        const freshData = await fetchFn()
        await this.cacheCriticalData(dataType, freshData, options)
        console.log(`‚úÖ Revalidation termin√©e pour ${dataType}`)
        
        // √âmettre un √©v√©nement pour notifier de la mise √† jour
        window.dispatchEvent(new CustomEvent('data-revalidated', {
          detail: { dataType, data: freshData }
        }))
      } catch (error) {
        console.warn(`‚ö†Ô∏è √âchec de revalidation pour ${dataType}:`, error)
      }
    }, 100) // D√©lai court pour √©viter de bloquer
  }

  /**
   * V√©rifie si les donn√©es sont fra√Æches
   * @param {number} lastSync - Timestamp de derni√®re synchronisation
   * @param {number} maxAge - √Çge maximum en millisecondes
   */
  isDataFresh(lastSync, maxAge = 60 * 60 * 1000) { // 1 heure par d√©faut
    return Date.now() - lastSync < maxAge
  }

  /**
   * Pr√©charge les donn√©es critiques au d√©marrage
   */
  async preloadCriticalData() {
    console.log('üöÄ Pr√©chargement des donn√©es critiques...')
    
    const preloadPromises = [
      this.preloadProfiles(),
      this.preloadLessons(),
      this.preloadNotifications()
    ]

    try {
      const results = await Promise.allSettled(preloadPromises)
      
      // Analyser les r√©sultats
      const successful = results.filter(result => result.status === 'fulfilled').length
      const failed = results.filter(result => result.status === 'rejected').length
      
      if (failed > 0) {
        console.warn(`‚ö†Ô∏è Pr√©chargement partiel: ${successful} r√©ussis, ${failed} √©chou√©s`)
        results.forEach((result, index) => {
          if (result.status === 'rejected') {
            const serviceNames = ['profiles', 'lessons', 'notifications']
            console.warn(`‚ùå √âchec du pr√©chargement ${serviceNames[index]}:`, result.reason)
          }
        })
      } else {
        console.log('‚úÖ Pr√©chargement des donn√©es critiques termin√© avec succ√®s')
      }
    } catch (error) {
      console.error('Erreur lors du pr√©chargement:', error)
    }
  }

  /**
   * Pr√©charge les profils
   */
  async preloadProfiles() {
    try {
      const profiles = await this.getCriticalData(
        'profiles',
        () => ProfileService.getAllProfiles(),
        { maxAge: 30 * 60 * 1000 } // 30 minutes
      )
      
      console.log(`üë• ${profiles.length} profils pr√©charg√©s`)
      return profiles
    } catch (error) {
      console.error('Erreur lors du pr√©chargement des profils:', error)
      return []
    }
  }

  /**
   * Pr√©charge les le√ßons
   */
  async preloadLessons() {
    try {
      const lessons = await this.getCriticalData(
        'lessons',
        () => LessonService.getAllAvailableLessons(),
        { maxAge: 60 * 60 * 1000 } // 1 heure
      )
      
      console.log(`üìö ${lessons.length} le√ßons pr√©charg√©es`)
      return lessons
    } catch (error) {
      console.error('Erreur lors du pr√©chargement des le√ßons:', error)
      return []
    }
  }

  /**
   * Pr√©charge les notifications
   */
  async preloadNotifications() {
    try {
      // R√©cup√©rer les notifications pour tous les profils actifs
      const profiles = cacheService.get(`${this.cachePrefix}profiles`, [])
      
      if (profiles.length === 0) {
        console.log('üîî Aucun profil trouv√© pour pr√©charger les notifications')
        return []
      }
      
      const notificationPromises = profiles.map(profile => 
        this.getCriticalData(
          `notifications_${profile.id}`,
          () => NotificationService.getNotifications(profile.id),
          { maxAge: 5 * 60 * 1000 } // 5 minutes
        )
      )

      const notifications = await Promise.allSettled(notificationPromises)
      const totalNotifications = notifications
        .filter(result => result.status === 'fulfilled')
        .reduce((total, result) => total + (result.value?.length || 0), 0)
      
      console.log(`üîî ${totalNotifications} notifications pr√©charg√©es pour ${profiles.length} profils`)
      return notifications
    } catch (error) {
      console.error('Erreur lors du pr√©chargement des notifications:', error)
      return []
    }
  }

  /**
   * Met en file d'attente une modification pour synchronisation
   * @param {string} action - Action √† synchroniser
   * @param {Object} data - Donn√©es de l'action
   */
  queueForSync(action, data) {
    const syncItem = {
      id: Date.now() + Math.random(),
      action,
      data,
      timestamp: Date.now(),
      retries: 0
    }

    this.syncQueue.push(syncItem)
    console.log(`üìù Action mise en file d'attente: ${action}`)

    // Sauvegarder la file d'attente
    this.saveSyncQueue()

    // Essayer de synchroniser imm√©diatement si en ligne
    if (this.isOnline) {
      this.syncPendingChanges()
    }
  }

  /**
   * Synchronise les modifications en attente
   */
  async syncPendingChanges() {
    if (this.syncInProgress || this.syncQueue.length === 0) {
      return
    }

    this.syncInProgress = true
    console.log(`üîÑ Synchronisation de ${this.syncQueue.length} actions en attente`)

    const itemsToSync = [...this.syncQueue]
    const successfulSyncs = []
    const failedSyncs = []

    for (const item of itemsToSync) {
      try {
        await this.syncItem(item)
        successfulSyncs.push(item)
        console.log(`‚úÖ Synchronisation r√©ussie: ${item.action}`)
      } catch (error) {
        console.error(`‚ùå √âchec de la synchronisation: ${item.action}`, error)
        
        item.retries++
        if (item.retries < 3) {
          failedSyncs.push(item)
        } else {
          console.warn(`üóëÔ∏è Abandon de la synchronisation apr√®s 3 tentatives: ${item.action}`)
        }
      }
    }

    // Mettre √† jour la file d'attente
    this.syncQueue = failedSyncs
    this.saveSyncQueue()

    // Nettoyer le cache des donn√©es synchronis√©es
    if (successfulSyncs.length > 0) {
      await this.invalidateCacheForSyncs(successfulSyncs)
    }

    this.syncInProgress = false
    console.log(`üéØ Synchronisation termin√©e: ${successfulSyncs.length} r√©ussies, ${failedSyncs.length} en attente`)
  }

  /**
   * Synchronise un √©l√©ment sp√©cifique
   * @param {Object} item - √âl√©ment √† synchroniser
   */
  async syncItem(item) {
    const { action, data } = item

    switch (action) {
      case 'create_profile':
        await ProfileService.createProfile(data)
        break
      case 'update_profile':
        await ProfileService.updateProfile(data.id, data)
        break
      case 'create_lesson':
        await LessonService.saveLesson(data.lessonData, data.profileId, data.files)
        break
      case 'save_quiz_result':
        await LessonService.saveQuizResults(data.lessonId, data.profileId, data.results)
        break
      case 'create_notification':
        await NotificationService.createNotification(
          data.profileId,
          data.type,
          data.title,
          data.message,
          data.data
        )
        break
      default:
        throw new Error(`Action de synchronisation non support√©e: ${action}`)
    }
  }

  /**
   * Invalide le cache pour les actions synchronis√©es
   * @param {Array} syncs - Actions synchronis√©es
   */
  async invalidateCacheForSyncs(syncs) {
    const tagsToInvalidate = new Set()

    for (const sync of syncs) {
      switch (sync.action) {
        case 'create_profile':
        case 'update_profile':
          tagsToInvalidate.add('profiles')
          break
        case 'create_lesson':
        case 'save_quiz_result':
          tagsToInvalidate.add('lessons')
          break
        case 'create_notification':
          tagsToInvalidate.add('notifications')
          break
      }
    }

    // Invalider les caches concern√©s
    for (const tag of tagsToInvalidate) {
      cacheService.deleteByTags([tag])
    }
  }

  /**
   * Sauvegarde la file d'attente de synchronisation
   */
  saveSyncQueue() {
    try {
      localStorage.setItem('teachdigital_sync_queue', JSON.stringify(this.syncQueue))
    } catch (error) {
      console.warn('Impossible de sauvegarder la file d\'attente de synchronisation:', error)
    }
  }

  /**
   * Charge la file d'attente de synchronisation
   */
  loadSyncQueue() {
    try {
      const stored = localStorage.getItem('teachdigital_sync_queue')
      if (stored) {
        this.syncQueue = JSON.parse(stored)
        console.log(`üìã File d'attente charg√©e: ${this.syncQueue.length} actions`)
      }
    } catch (error) {
      console.warn('Impossible de charger la file d\'attente de synchronisation:', error)
    }
  }

  /**
   * D√©marre la synchronisation p√©riodique
   */
  startPeriodicSync() {
    // Charger la file d'attente existante
    this.loadSyncQueue()

    // Synchroniser toutes les 5 minutes si en ligne
    setInterval(() => {
      if (this.isOnline && this.syncQueue.length > 0) {
        this.syncPendingChanges()
      }
    }, 5 * 60 * 1000)
  }

  /**
   * Obtient les statistiques du service offline
   */
  getStats() {
    return {
      isOnline: this.isOnline,
      syncQueueLength: this.syncQueue.length,
      syncInProgress: this.syncInProgress,
      cacheStats: cacheService.getStats()
    }
  }

  /**
   * Force la synchronisation de toutes les donn√©es
   */
  async forceSync() {
    console.log('üîÑ Synchronisation forc√©e des donn√©es...')
    
    // Vider le cache pour forcer le rechargement
    cacheService.deleteByTags(['critical'])
    
    // Pr√©charger les donn√©es fra√Æches
    await this.preloadCriticalData()
    
    // Synchroniser les modifications en attente
    await this.syncPendingChanges()
    
    console.log('‚úÖ Synchronisation forc√©e termin√©e')
  }
}

// Instance singleton
const offlineDataService = new OfflineDataService()

export default offlineDataService
export { OfflineDataService }
