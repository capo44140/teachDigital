#!/usr/bin/env node

/**
 * Script de build optimis√© pour Vercel
 * √âvite les probl√®mes de d√©pendances natives comme sharp
 */

import { execSync } from 'child_process'
import fs from 'fs'
import path from 'path'

console.log('üöÄ D√©marrage du build Vercel...')

try {
  // V√©rifier si les ic√¥nes existent d√©j√†
  const iconsDir = path.join(process.cwd(), 'public', 'icons')
  const hasIcons = fs.existsSync(iconsDir) && fs.readdirSync(iconsDir).length > 0
  
  if (!hasIcons) {
    console.log('üìÅ Copie des ic√¥nes par d√©faut...')
    
    // Cr√©er le dossier icons s'il n'existe pas
    if (!fs.existsSync(iconsDir)) {
      fs.mkdirSync(iconsDir, { recursive: true })
    }
    
    // Copier les ic√¥nes de base depuis le dossier public
    const defaultIcons = [
      'icon-72x72.png',
      'icon-96x96.png', 
      'icon-128x128.png',
      'icon-144x144.png',
      'icon-152x152.png',
      'icon-192x192.png',
      'icon-384x384.png',
      'icon-512x512.png'
    ]
    
    for (const icon of defaultIcons) {
      const sourcePath = path.join(process.cwd(), 'public', icon)
      const destPath = path.join(iconsDir, icon)
      
      if (fs.existsSync(sourcePath)) {
        fs.copyFileSync(sourcePath, destPath)
        console.log(`‚úÖ Copi√©: ${icon}`)
      }
    }
  } else {
    console.log('‚úÖ Ic√¥nes d√©j√† pr√©sentes, skip de la g√©n√©ration')
  }
  
  // Ex√©cuter le build Vite
  console.log('üî® Ex√©cution du build Vite...')
  execSync('vite build --mode production', { 
    stdio: 'inherit',
    cwd: process.cwd()
  })
  
  console.log('‚úÖ Build Vercel termin√© avec succ√®s!')
  
} catch (error) {
  console.error('‚ùå Erreur lors du build Vercel:', error.message)
  process.exit(1)
}
