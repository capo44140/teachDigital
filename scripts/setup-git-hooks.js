#!/usr/bin/env node

import fs from 'fs'
import path from 'path'
import { execSync } from 'child_process'

/**
 * Script pour configurer les hooks Git automatiques
 * Usage: node scripts/setup-git-hooks.js
 */

function createGitHooks() {
  const hooksDir = '.git/hooks'
  const preCommitHook = path.join(hooksDir, 'pre-commit')
  const prePushHook = path.join(hooksDir, 'pre-push')
  
  // Cr√©er le r√©pertoire hooks s'il n'existe pas
  if (!fs.existsSync(hooksDir)) {
    fs.mkdirSync(hooksDir, { recursive: true })
  }
  
  // Hook pre-commit
  const preCommitContent = `#!/bin/sh
# Hook pre-commit pour incr√©menter automatiquement la version
node scripts/pre-commit-hook.js
`
  
  fs.writeFileSync(preCommitHook, preCommitContent)
  fs.chmodSync(preCommitHook, '755')
  console.log('‚úÖ Hook pre-commit configur√©')
  
  // Hook pre-push (optionnel)
  const prePushContent = `#!/bin/sh
# Hook pre-push pour v√©rifier la version
echo "üöÄ Pushing to remote repository..."
echo "üì¶ Current version: $(node -p "require('./package.json').version")"
`
  
  fs.writeFileSync(prePushHook, prePushContent)
  fs.chmodSync(prePushHook, '755')
  console.log('‚úÖ Hook pre-push configur√©')
}

function createVersionFile() {
  const versionInfo = {
    version: "0.0.0",
    buildDate: new Date().toISOString(),
    buildNumber: Date.now()
  }
  
  // Cr√©er le r√©pertoire src s'il n'existe pas
  if (!fs.existsSync('src')) {
    fs.mkdirSync('src', { recursive: true })
  }
  
  fs.writeFileSync('public/version.json', JSON.stringify(versionInfo, null, 2) + '\n')
  console.log('‚úÖ Fichier version.json initial cr√©√©')
}

function updatePackageScripts() {
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'))
    
    // Ajouter des scripts de version
    packageJson.scripts = {
      ...packageJson.scripts,
      'version:patch': 'node scripts/version-bump.js patch',
      'version:minor': 'node scripts/version-bump.js minor',
      'version:major': 'node scripts/version-bump.js major',
      'version:current': 'node -p "require(\'./package.json\').version"',
      'setup:hooks': 'node scripts/setup-git-hooks.js'
    }
    
    fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2) + '\n')
    console.log('‚úÖ Scripts de version ajout√©s au package.json')
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour du package.json:', error.message)
  }
}

function main() {
  console.log('üîß Configuration des hooks Git pour l\'incr√©mentation automatique de version...')
  
  // V√©rifier si on est dans un d√©p√¥t Git
  try {
    execSync('git rev-parse --git-dir', { stdio: 'ignore' })
  } catch (error) {
    console.error('‚ùå Ce r√©pertoire n\'est pas un d√©p√¥t Git. Initialisez d\'abord Git avec: git init')
    process.exit(1)
  }
  
  // Cr√©er les hooks Git
  createGitHooks()
  
  // Cr√©er le fichier de version initial
  createVersionFile()
  
  // Mettre √† jour les scripts package.json
  updatePackageScripts()
  
  console.log('\nüéâ Configuration termin√©e !')
  console.log('\nüìã Commandes disponibles:')
  console.log('  npm run version:patch  - Incr√©menter la version patch (0.0.1)')
  console.log('  npm run version:minor  - Incr√©menter la version minor (0.1.0)')
  console.log('  npm run version:major  - Incr√©menter la version major (1.0.0)')
  console.log('  npm run version:current - Afficher la version actuelle')
  console.log('\nüîÑ L\'incr√©mentation automatique se fera √† chaque commit sur la branche main/master')
}

// Ex√©cuter le script
main()
