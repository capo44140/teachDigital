/**
 * Script de test pour le cache des profils
 * V√©rifie que les profils sont correctement mis en cache
 */

import { ProfileService } from '../src/services/profile/profileService.js'
import offlineDataService from '../src/services/offlineDataService.js'
import cacheService from '../src/services/cacheService.js'

async function testProfileCache() {
  console.log('üß™ Test du cache des profils...')
  
  const tests = [
    {
      name: 'Chargement initial des profils',
      test: async () => {
        console.log('üì• Chargement initial des profils...')
        const profiles = await offlineDataService.getCriticalData(
          'profiles',
          () => ProfileService.getAllProfiles(),
          { 
            maxAge: 30 * 60 * 1000,
            ttl: 30 * 60 * 1000,
            persistent: true,
            priority: 'high',
            tags: ['profiles']
          }
        )
        
        console.log(`‚úÖ ${profiles.length} profils charg√©s`)
        return profiles.length > 0
      }
    },
    {
      name: 'V√©rification du cache',
      test: async () => {
        console.log('üîç V√©rification du cache...')
        const cachedProfiles = cacheService.get('offline_profiles')
        
        if (cachedProfiles) {
          console.log(`‚úÖ ${cachedProfiles.length} profils trouv√©s en cache`)
          return true
        } else {
          console.log('‚ùå Aucun profil en cache')
          return false
        }
      }
    },
    {
      name: 'Chargement depuis le cache',
      test: async () => {
        console.log('üì§ Chargement depuis le cache...')
        const startTime = Date.now()
        
        const profiles = await offlineDataService.getCriticalData(
          'profiles',
          () => ProfileService.getAllProfiles(),
          { 
            maxAge: 30 * 60 * 1000,
            ttl: 30 * 60 * 1000,
            persistent: true,
            priority: 'high',
            tags: ['profiles']
          }
        )
        
        const endTime = Date.now()
        const loadTime = endTime - startTime
        
        console.log(`‚úÖ Profils charg√©s depuis le cache en ${loadTime}ms`)
        return loadTime < 100 // Moins de 100ms = depuis le cache
      }
    },
    {
      name: 'Test de persistance',
      test: async () => {
        console.log('üíæ Test de persistance...')
        
        // V√©rifier que les donn√©es sont en localStorage
        const stored = localStorage.getItem('teachdigital_cache')
        if (stored) {
          const cacheData = JSON.parse(stored)
          const hasProfiles = cacheData['offline_profiles'] !== undefined
          
          if (hasProfiles) {
            console.log('‚úÖ Donn√©es persistantes trouv√©es')
            return true
          } else {
            console.log('‚ùå Aucune donn√©e persistante')
            return false
          }
        } else {
          console.log('‚ùå Aucun cache persistant')
          return false
        }
      }
    },
    {
      name: 'Test d\'invalidation',
      test: async () => {
        console.log('üóëÔ∏è Test d\'invalidation...')
        
        // Invalider le cache
        cacheService.deleteByTags(['profiles'])
        
        // V√©rifier que le cache est vide
        const cachedProfiles = cacheService.get('offline_profiles')
        
        if (!cachedProfiles) {
          console.log('‚úÖ Cache invalid√© avec succ√®s')
          return true
        } else {
          console.log('‚ùå Cache non invalid√©')
          return false
        }
      }
    },
    {
      name: 'Statistiques du cache',
      test: async () => {
        console.log('üìä Statistiques du cache...')
        const stats = cacheService.getStats()
        
        console.log('Statistiques:', {
          hits: stats.hits,
          misses: stats.misses,
          hitRate: stats.hitRate + '%',
          size: stats.size,
          memoryUsage: stats.memoryUsage?.kb + ' KB'
        })
        
        return stats.hitRate > 0
      }
    }
  ]

  let passed = 0
  let failed = 0

  for (const test of tests) {
    try {
      const result = await test.test()
      if (result) {
        passed++
        console.log(`‚úÖ ${test.name}: R√âUSSI`)
      } else {
        failed++
        console.log(`‚ùå ${test.name}: √âCHOU√â`)
      }
    } catch (error) {
      failed++
      console.error(`‚ùå ${test.name}: ERREUR -`, error.message)
    }
    console.log('') // Ligne vide pour la lisibilit√©
  }

  console.log(`üìä R√©sultats des tests: ${passed} r√©ussis, ${failed} √©chou√©s`)
  
  if (failed === 0) {
    console.log('üéâ Tous les tests du cache des profils sont r√©ussis!')
  } else {
    console.log('‚ö†Ô∏è Certains tests ont √©chou√©')
  }

  return { passed, failed }
}

// Ex√©cuter les tests si le script est appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  testProfileCache().catch(console.error)
}

export { testProfileCache }
